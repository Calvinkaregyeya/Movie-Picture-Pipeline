name: Frontend CD

on:
  push:
    branches:
      - main

defaults:
  run:
    working-directory: ./starter/frontend

jobs:
  test:
    name: "Test"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.14

      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: CI=true npm test

  build:
    name: "Build"
    runs-on: ubuntu-latest
    needs: [test]
    env:
        IMAGE_NAME: 'movie-catalog'
        EKS_CLUSTER_NAME: 'cluster'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.14
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}


        run: | 
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME

      - name: Deploy to EKS
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME

          kubectl apply -f k8s/deployment.yaml
          kubectl rollout restart deployment frontend

  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.14

      - name: Deploy to Prod
        run: echo "Deploying to production"

